package ru.easydonate.easydonate4j.api.v3.data.model.shop.payment;

import org.jetbrains.annotations.NotNull;
import ru.easydonate.easydonate4j.api.v3.client.EasyDonateClient;
import ru.easydonate.easydonate4j.api.v3.data.model.shop.DeliveryModeType;
import ru.easydonate.easydonate4j.api.v3.data.model.shop.payment.pending.PendingPaymentBuilder;
import ru.easydonate.easydonate4j.api.v3.data.model.shop.purchase.PurchasedProduct;
import ru.easydonate.easydonate4j.api.v3.data.model.shop.server.Server;
import ru.easydonate.easydonate4j.data.model.PrettyPrintable;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The interface that represents a payment and contains all related data.
 * @author soknight
 */
public interface Payment extends PrettyPrintable {

    /**
     * Get the unique ID of this payment.
     * @return The payment ID.
     */
    int getId();

    /**
     * Get the ID of the payment owning shop.
     * @return The owning shop ID.
     */
    int getShopId();

    /**
     * Get the customer of this payment.
     * @return The payment customer.
     */
    @NotNull String getCustomer();

    /**
     * Get the optional-wrapped email of the customer of this payment.
     * <br>
     * If an email wasn't actually specified by the customer,
     * this method will return an empty Optional.
     * @return The optional-wrapped payment customer's email.
     */
    @NotNull Optional<String> getEmail();

    /**
     * Get the current status of this payment.
     * <br>
     * For the list of payments from the {@link EasyDonateClient#getPaymentsList()}
     * method a status of everyone returned payment will be {@link PaymentStatus#SUCCESS}
     * @return The payment status.
     * @see PaymentStatus
     */
    @NotNull PaymentStatus getStatus();

    /**
     * Get the raw status of this payment.
     * <br>
     * Can be used when the {@link #getStatus()} method
     * has returned the unknown constant.
     * @return The raw payment status.
     * @see #getStatus()
     */
    int getStatusRaw();

    /**
     * Get the purchase cost of this payment.
     * @return The payment purchase cost.
     */
    double getPurchaseCost();

    /**
     * Get the enrolled amount.
     * <br>
     * It's an amount that has been added to yours real shop balance.
     * @return The enrolled amount.
     */
    double getEnrolledAmount();

    /**
     * Get the EasyDonate platform comission.
     * <br>
     * It's an amount that has been withdrawn by the EasyDonate aggregator.
     * @return The service comission.
     */
    double getServiceComission();

    /**
     * Get the used payment system of this payment.
     * @return The used payment system.
     * @see PaymentSystem
     */
    @NotNull PaymentSystem getPaymentSystem();

    /**
     * Get the raw used payment system of this payment.
     * <br>
     * Can be used when the {@link #getPaymentSystem()} method
     * has returned the unknown constant.
     * @return The raw used payment system.
     * @see #getPaymentSystem()
     */
    @NotNull String getPaymentSystemRaw();

    /**
     * Get the used payment type of this payment.
     * @return The used payment type.
     * @see PaymentType
     */
    @NotNull PaymentType getPaymentType();

    /**
     * Get the raw used payment type of this payment.
     * <br>
     * Can be used when the {@link #getPaymentType()} method
     * has returned the unknown constant.
     * @return The raw used payment type.
     * @see #getPaymentType()
     */
    @NotNull String getPaymentTypeRaw();

    /**
     * Get the ID of the connected server related to this payment.
     * @return The payment server ID.
     */
    int getServerId();

    /**
     * Get the delivery mode used for this payment.
     * @return The payment delivery mode.
     * @see DeliveryModeType
     */
    @NotNull DeliveryModeType getDeliveryType();

    /**
     * Get the raw delivery mode type.
     * <br>
     * Can be used when the {@link #getDeliveryType()} method
     * has returned the unknown constant.
     * @return The raw payment delivery mode.
     * @see #getDeliveryType()
     */
    @NotNull String getDeliveryTypeRaw();

    /**
     * Get the optional-wrapped redirect URL for this payment.
     * <br>
     * Only will be returned if this payment was generated by
     * the corresponding API method or using the
     * {@link EasyDonateClient#createPayment()} method.
     * @return The optional-wrapped payment redirect URL.
     * @see EasyDonateClient#createPayment()
     * @see PendingPaymentBuilder#setRedirectUrl(String)
     */
    @NotNull Optional<String> getRedirectUrl();

    /**
     * Get the optional-wrapped error message for this payment.
     * <br>
     * If any error was occurred then this error message stored here.
     * @return The optional-wrapped payment error message.
     */
    @NotNull Optional<String> getErrorMessage();

    /**
     * Get the amount of attempts to handle this payment on the server side.
     * <br>
     * If this shop uses the plugin delivery mode then this counter means an
     * amount of attempts to run all commands of purchased products.
     * @return The amount of attempts to handle this payment.
     * @see DeliveryModeType#PLUGIN
     */
    int getHandleAttempts();

    /**
     * Check is all commands from the payment related purchased products
     * was successfully sent to the connected game server.
     * @return A boolean value: the check result.
     */
    boolean wasSent();

    /**
     * Get the optional-wrapped rating value.
     * <br>
     * When a customer returns to the shop after the payment completion, this
     * customer can rate the payment process upon his user experience.
     * @return The payment process rating from a customer.
     */
    @NotNull OptionalInt getRating();

    /**
     * Get the list of all sent commands.
     * @return The list of all sent commands.
     * @see SentCommand
     * @see PurchasedProduct#getCommands()
     */
    @NotNull List<SentCommand> getSentCommands();

    /**
     * Get the list of all purchased products of this payment.
     * @return The list of all purchased products.
     * @see PurchasedProduct
     */
    @NotNull List<PurchasedProduct> getProducts();

    /**
     * Get the target game server describing object.
     * @return The target game server.
     * @see Server
     */
    @NotNull Server getServer();

    /**
     * Get the creation date of this payment.
     * @return The payment creation date.
     */
    @NotNull LocalDateTime getCreatedAt();

    /**
     * Get the date of last update of this payment.
     * @return The last payment update date.
     */
    @NotNull LocalDateTime getUpdatedAt();

}
